require:
  - rubocop-performance

AllCops:
  DisabledByDefault: true
  Exclude:
    - 'bin/{bundle,rackup,rake,rspec,rubocop}'
    - 'target/**/*'
    - 'vendor/**/*'

# Bundler Cop Configuration
# https://docs.rubocop.org/en/stable/cops_bundler/

Bundler/DuplicatedGem:
  Enabled: true
Bundler/GemComment:
# Disabled. Comments for each gem declaration are not required.
  Enabled: false
Bundler/InsecureProtocolSource:
  Enabled: true
Bundler/OrderedGems:
  Enabled: true

# Gemspec Cop Configuration
# https://docs.rubocop.org/en/stable/cops_gemspec/

Gemspec/DuplicatedAssignment:
  Enabled: true
Gemspec/OrderedDependencies:
  Enabled: true
Gemspec/RequiredRubyVersion:
  Enabled: true
Gemspec/RubyVersionGlobalsUsage:
  Enabled: true

# Layout Cop Configuration
# https://docs.rubocop.org/en/stable/cops_layout/

Layout/AccessModifierIndentation:
  Enabled: true
Layout/ArgumentAlignment:
  Enabled: true
Layout/ArrayAlignment:
  Enabled: true
Layout/AssignmentIndentation:
  Enabled: true
Layout/BlockAlignment:
  Enabled: true
Layout/BlockEndNewline:
  Enabled: true
Layout/CaseIndentation:
  Enabled: true
Layout/ClassStructure:
  Enabled: true
Layout/ClosingHeredocIndentation:
  Enabled: true
Layout/ClosingParenthesisIndentation:
  Enabled: true
Layout/CommentIndentation:
  Enabled: true
Layout/ConditionPosition:
  Enabled: true
Layout/DefEndAlignment:
  Enabled: true
Layout/DotPosition:
  Enabled: true
Layout/ElseAlignment:
  Enabled: true
Layout/EmptyComment:
  Enabled: true
Layout/EmptyLineAfterGuardClause:
  Enabled: true
Layout/EmptyLineAfterMagicComment:
  Enabled: true
Layout/EmptyLineBetweenDefs:
  Enabled: true
Layout/EmptyLines:
  Enabled: true
Layout/EmptyLinesAroundAccessModifier:
  Enabled: true
Layout/EmptyLinesAroundArguments:
  Enabled: true
Layout/EmptyLinesAroundBeginBody:
  Enabled: true
Layout/EmptyLinesAroundBlockBody:
  Enabled: true
Layout/EmptyLinesAroundClassBody:
  Enabled: true
Layout/EmptyLinesAroundExceptionHandlingKeywords:
  Enabled: true
Layout/EmptyLinesAroundMethodBody:
  Enabled: true
Layout/EmptyLinesAroundModuleBody:
  Enabled: true
Layout/EndAlignment:
  Enabled: true
Layout/EndOfLine:
  Enabled: true
Layout/ExtraSpacing:
  Enabled: true
Layout/FirstArgumentIndentation:
  Enabled: true
Layout/FirstArrayElementIndentation:
  Enabled: true
Layout/FirstArrayElementLineBreak:
  Enabled: true
Layout/FirstHashElementLineBreak:
  Enabled: true
Layout/FirstHashElementIndentation:
  Enabled: true
Layout/FirstMethodArgumentLineBreak:
  Enabled: true
Layout/FirstMethodParameterLineBreak:
  Enabled: true
Layout/FirstParameterIndentation:
  Enabled: true
Layout/HashAlignment:
  Enabled: true
Layout/HeredocArgumentClosingParenthesis:
  Enabled: true
Layout/HeredocIndentation:
  Enabled: true
Layout/IndentationConsistency:
  Enabled: true
Layout/IndentationWidth:
  Enabled: true
Layout/InitialIndentation:
  Enabled: true
Layout/LeadingEmptyLines:
  Enabled: true
Layout/LeadingCommentSpace:
  Enabled: true
Layout/LineLength:
# Lines are allowed to be a maximum of 120 characters. However, it is suggested that, in practice,
# line should be kept to a maximum of 100 for readability, especially within comments.
  Enabled: true
  Max: 120
Layout/MultilineArrayBraceLayout:
  Enabled: true
Layout/MultilineArrayLineBreaks:
  Enabled: true
Layout/MultilineAssignmentLayout:
  Enabled: true
Layout/MultilineBlockLayout:
  Enabled: true
Layout/MultilineHashBraceLayout:
  Enabled: true
Layout/MultilineHashKeyLineBreaks:
  Enabled: true
Layout/MultilineMethodArgumentLineBreaks:
  Enabled: true
Layout/MultilineMethodCallBraceLayout:
  Enabled: true
Layout/MultilineMethodCallIndentation:
  Enabled: true
Layout/MultilineMethodDefinitionBraceLayout:
  Enabled: true
Layout/MultilineOperationIndentation:
  Enabled: true
Layout/ParameterAlignment:
  Enabled: true
Layout/RescueEnsureAlignment:
  Enabled: true
Layout/SpaceAfterColon:
  Enabled: true
Layout/SpaceAfterComma:
  Enabled: true
Layout/SpaceAfterMethodName:
  Enabled: true
Layout/SpaceAfterNot:
  Enabled: true
Layout/SpaceAfterSemicolon:
  Enabled: true
Layout/SpaceAroundBlockParameters:
  Enabled: true
Layout/SpaceAroundEqualsInParameterDefault:
  Enabled: true
Layout/SpaceAroundKeyword:
  Enabled: true
Layout/SpaceAroundOperators:
  Enabled: true
Layout/SpaceBeforeBlockBraces:
  Enabled: true
Layout/SpaceBeforeComma:
  Enabled: true
Layout/SpaceBeforeComment:
  Enabled: true
Layout/SpaceBeforeFirstArg:
  Enabled: true
Layout/SpaceBeforeSemicolon:
  Enabled: true
Layout/SpaceInLambdaLiteral:
  Enabled: true
Layout/SpaceInsideArrayLiteralBrackets:
  Enabled: true
Layout/SpaceInsideArrayPercentLiteral:
  Enabled: true
Layout/SpaceInsideBlockBraces:
  Enabled: true
Layout/SpaceInsideHashLiteralBraces:
  Enabled: true
Layout/SpaceInsideParens:
  Enabled: true
Layout/SpaceInsidePercentLiteralDelimiters:
  Enabled: true
Layout/SpaceInsideRangeLiteral:
  Enabled: true
Layout/SpaceInsideReferenceBrackets:
  Enabled: true
Layout/SpaceInsideStringInterpolation:
  Enabled: true
Layout/Tab:
  Enabled: true
Layout/TrailingEmptyLines:
  Enabled: true
Layout/TrailingWhitespace:
  Enabled: true

# Lint Cop Configuration
# https://docs.rubocop.org/en/stable/cops_lint/

Lint/AmbiguousBlockAssociation:
  Enabled: true
Lint/AmbiguousOperator:
  Enabled: true
Lint/AmbiguousRegexpLiteral:
  Enabled: true
Lint/AssignmentInCondition:
  Enabled: true
Lint/BigDecimalNew:
  Enabled: true
Lint/BooleanSymbol:
  Enabled: true
Lint/CircularArgumentReference:
  Enabled: true
Lint/Debugger:
  Enabled: true
Lint/DeprecatedClassMethods:
  Enabled: true
Lint/DisjunctiveAssignmentInConstructor:
  Enabled: true
Lint/DuplicateCaseCondition:
  Enabled: true
Lint/DuplicateMethods:
  Enabled: true
Lint/DuplicateHashKey:
  Enabled: true
Lint/EachWithObjectArgument:
  Enabled: true
Lint/ElseLayout:
  Enabled: true
Lint/EmptyEnsure:
  Enabled: true
Lint/EmptyExpression:
  Enabled: true
Lint/EmptyInterpolation:
  Enabled: true
Lint/EmptyWhen:
  Enabled: true
Lint/EnsureReturn:
  Enabled: true
Lint/ErbNewArguments:
  Enabled: true
Lint/FlipFlop:
  Enabled: true
Lint/FloatOutOfRange:
  Enabled: true
Lint/FormatParameterMismatch:
  Enabled: true
Lint/HeredocMethodCallPosition:
  Enabled: true
Lint/ImplicitStringConcatenation:
  Enabled: true
Lint/IneffectiveAccessModifier:
  Enabled: true
Lint/InheritException:
  Enabled: true
Lint/InterpolationCheck:
  Enabled: true
Lint/LiteralAsCondition:
  Enabled: true
Lint/LiteralInInterpolation:
  Enabled: true
Lint/Loop:
  Enabled: true
Lint/MissingCopEnableDirective:
  Enabled: true
Lint/MultipleComparison:
  Enabled: true
Lint/NestedMethodDefinition:
  Enabled: true
Lint/NestedPercentLiteral:
  Enabled: true
Lint/NextWithoutAccumulator:
  Enabled: true
Lint/NonLocalExitFromIterator:
  Enabled: true
Lint/NumberConversion:
  Enabled: false
Lint/OrderedMagicComments:
  Enabled: true
Lint/ParenthesesAsGroupedExpression:
  Enabled: true
Lint/PercentStringArray:
  Enabled: true
Lint/PercentSymbolArray:
  Enabled: true
Lint/RandOne:
  Enabled: true
Lint/RedundantCopDisableDirective:
  Enabled: true
Lint/RedundantCopEnableDirective:
  Enabled: true
Lint/RedundantRequireStatement:
  Enabled: true
Lint/RedundantSplatExpansion:
  Enabled: true
Lint/RedundantStringCoercion:
  Enabled: true
Lint/RedundantWithIndex:
  Enabled: true
Lint/RedundantWithObject:
  Enabled: true
Lint/RegexpAsCondition:
  Enabled: true
Lint/RequireParentheses:
  Enabled: true
Lint/RescueException:
  Enabled: true
Lint/RescueType:
  Enabled: true
Lint/ReturnInVoidContext:
  Enabled: true
Lint/SafeNavigationChain:
  Enabled: true
Lint/SafeNavigationConsistency:
  Enabled: true
Lint/SafeNavigationWithEmpty:
  Enabled: true
Lint/ScriptPermission:
  Enabled: true
Lint/ShadowedArgument:
  Enabled: true
Lint/ShadowedException:
  Enabled: true
Lint/ShadowingOuterLocalVariable:
  Enabled: true
Lint/SuppressedException:
  Enabled: true
Lint/Syntax:
  Enabled: true
Lint/ToJSON:
  Enabled: true
Lint/UnderscorePrefixedVariableName:
  Enabled: true
Lint/UnifiedInteger:
  Enabled: true
Lint/UnreachableCode:
  Enabled: true
Lint/UnusedBlockArgument:
  Enabled: true
Lint/UnusedMethodArgument:
  Enabled: true
Lint/UriEscapeUnescape:
  Enabled: true
Lint/UriRegexp:
  Enabled: true
Lint/UselessAccessModifier:
  Enabled: true
Lint/UselessAssignment:
  Enabled: true
Lint/UselessComparison:
  Enabled: true
Lint/UselessElseWithoutRescue:
  Enabled: true
Lint/UselessSetterCall:
  Enabled: true
Lint/Void:
  Enabled: true

# Metrics Cop Configuration
# https://docs.rubocop.org/en/stable/cops_metrics/

Metrics/AbcSize:
# Disabled along with all length metric constraints are considered arbitrary and arguably
# don't provide enough value for their use.
  Enabled: false
Metrics/BlockLength:
# Disabled, see Metrics/AbcSize comment, above.
  Enabled: false
Metrics/BlockNesting:
  Enabled: true
Metrics/ClassLength:
# Disabled, see Metrics/AbcSize comment, above.
  Enabled: false
Metrics/CyclomaticComplexity:
# Disabled as this cop seems arbitrary without some due-diligence on a max value that demonstrates
# an increase in quality, readability, maintainability or some other value.
  Enabled: false
Metrics/MethodLength:
# Disabled, see Metrics/AbcSize comment, above.
  Enabled: false
Metrics/ModuleLength:
# Disabled, see Metrics/AbcSize comment, above.
  Enabled: false
Metrics/ParameterLists:
# Disabled, see Metrics/AbcSize comment, above.
  Enabled: false
Metrics/PerceivedComplexity:
# Disabled, see Metrics/CyclomaticComplexity comment, above.
  Enabled: false

# Naming Cop Configuration
# https://docs.rubocop.org/en/stable/cops_naming/

Naming/AccessorMethodName:
  Enabled: true
Naming/AsciiIdentifiers:
  Enabled: true
Naming/BinaryOperatorParameterName:
  Enabled: true
Naming/BlockParameterName:
  Enabled: true
Naming/ClassAndModuleCamelCase:
  Enabled: true
Naming/ConstantName:
  Enabled: true
Naming/FileName:
  Enabled: true
Naming/HeredocDelimiterCase:
  Enabled: true
Naming/HeredocDelimiterNaming:
  Enabled: true
Naming/MemoizedInstanceVariableName:
  Enabled: true
Naming/MethodName:
  Enabled: true
  IgnoredPatterns:
    - 'do_GET'
    - 'do_POST'
    - 'do_PUT'
    - 'do_DELETE'
    - 'do_HEAD'
    - 'do_OPTIONS'
Naming/MethodParameterName:
  Enabled: true
Naming/PredicateName:
  Enabled: true
Naming/RescuedExceptionsVariableName:
# Disabled. It's acceptable to use alternate variable names for rescued exceptions, when necessary.
  Enabled: false
Naming/VariableName:
  Enabled: true
Naming/VariableNumber:
  Enabled: true


# Performance Cop Configuration
# https://rubocop-performance.readthedocs.io/en/stable/cops_performance/

Performance/Caller:
  Enabled: true
Performance/CaseWhenSplat:
  Enabled: true
Performance/Casecmp:
  Enabled: true
Performance/ChainArrayAllocation:
  Enabled: true
Performance/CompareWithBlock:
  Enabled: true
Performance/Count:
  Enabled: true
Performance/Detect:
  Enabled: true
Performance/DoubleStartEndWith:
  Enabled: true
Performance/EndWith:
  Enabled: true
Performance/FixedSize:
  Enabled: true
Performance/FlatMap:
  Enabled: true
Performance/InefficientHashSearch:
  Enabled: true
Performance/OpenStruct:
  Enabled: true
Performance/RangeInclude:
  Enabled: true
Performance/RedundantBlockCall:
  Enabled: true
Performance/RedundantMatch:
  Enabled: true
Performance/RedundantMerge:
  Enabled: true
Performance/RegexpMatch:
  Enabled: true
Performance/ReverseEach:
  Enabled: true
Performance/Size:
  Enabled: true
Performance/StartWith:
  Enabled: true
Performance/StringReplacement:
  Enabled: true
Performance/TimesMap:
  Enabled: true
Performance/UnfreezeString:
  Enabled: true
Performance/UriDefaultParser:
  Enabled: true

# Security Cop Configuration
# https://docs.rubocop.org/en/stable/cops_security/

Security/Eval:
  Enabled: true
Security/JSONLoad:
  Enabled: true
Security/MarshalLoad:
  Enabled: true
Security/Open:
  Enabled: true
Security/YAMLLoad:
  Enabled: true

# Style Cop Configuration
# https://docs.rubocop.org/en/stable/cops_style/

Style/AccessModifierDeclarations:
  Enabled: true
Style/Alias:
  Enabled: true
Style/AndOr:
  Enabled: true
Style/ArrayJoin:
  Enabled: true
Style/AsciiComments:
  Enabled: true
Style/Attr:
  Enabled: true
Style/AutoResourceCleanup:
  Enabled: false
Style/BarePercentLiterals:
  Enabled: true
Style/BeginBlock:
  Enabled: true
Style/BlockComments:
  Enabled: true
Style/BlockDelimiters:
  Enabled: true
Style/CaseEquality:
  Enabled: true
Style/CharacterLiteral:
  Enabled: true
Style/ClassAndModuleChildren:
  Enabled: true
Style/ClassCheck:
  Enabled: true
Style/ClassMethods:
  Enabled: true
Style/ClassVars:
  Enabled: true
Style/CollectionMethods:
# Disabled. There is no preference on which collection method aliases should be used.
  Enabled: false
Style/ColonMethodCall:
  Enabled: true
Style/ColonMethodDefinition:
  Enabled: true
Style/CommandLiteral:
  Enabled: true
Style/CommentAnnotation:
  Enabled: true
Style/CommentedKeyword:
  Enabled: true
Style/ConditionalAssignment:
  Enabled: true
Style/ConstantVisibility:
# Disabled. Most constants need to be public, so this provides little value.
  Enabled: false
Style/Copyright:
# Disabled. Copyright statements are not required.
  Enabled: false
Style/DateTime:
  Enabled: true
Style/DefWithParentheses:
  Enabled: true
Style/Dir:
  Enabled: true
Style/Documentation:
  Enabled: true
  Exclude:
    - test/**/*
    - spec/**/*
Style/DocumentationMethod:
  Enabled: true
  Exclude:
    - test/**/*
    - spec/**/*
Style/DoubleCopDisableDirective:
  Enabled: true
Style/DoubleNegation:
  Enabled: true
Style/EachForSimpleLoop:
  Enabled: true
Style/EachWithObject:
  Enabled: true
Style/EmptyBlockParameter:
  Enabled: true
Style/EmptyCaseCondition:
  Enabled: true
Style/EmptyElse:
  Enabled: true
Style/EmptyLambdaParameter:
  Enabled: true
Style/EmptyLiteral:
  Enabled: true
Style/EmptyMethod:
  Enabled: true
Style/Encoding:
  Enabled: true
Style/EndBlock:
  Enabled: true
Style/EvalWithLocation:
  Enabled: true
Style/EvenOdd:
  Enabled: true
Style/ExpandPathArguments:
  Enabled: true
Style/FloatDivision:
  Enabled: true
Style/For:
  Enabled: true
Style/FormatString:
  Enabled: true
Style/FormatStringToken:
  Enabled: true
Style/FrozenStringLiteralComment:
  Enabled: true
Style/GlobalVars:
  Enabled: true
Style/GuardClause:
  Enabled: true
Style/HashSyntax:
  Enabled: true
Style/IdenticalConditionalBranches:
  Enabled: true
Style/IfInsideElse:
  Enabled: true
Style/IfUnlessModifier:
  Enabled: true
Style/IfUnlessModifierOfIfUnless:
  Enabled: true
Style/IfWithSemicolon:
  Enabled: true
Style/ImplicitRuntimeError:
# Enabled. It is preferred to avoid raising implicit exceptions; they should be explicitly declared.
  Enabled: true
Style/InfiniteLoop:
  Enabled: true
Style/InlineComment:
# Disabled. Inline comments are allowed.
  Enabled: false
Style/InverseMethods:
# Disabled. Determining whether using select or reject is most appropriate is best left to the
# person writing the code.
  Enabled: false
Style/IpAddresses:
# Enabled. This cop may potentially be problematic, but we'll attempt to maintain the whitelist
# until we encounter an issue.
  Enabled: true
  AllowedAddresses:
    - '::'
    - '::1'
    - '127.0.0.1'
Style/Lambda:
  Enabled: true
Style/LambdaCall:
  Enabled: true
Style/LineEndConcatenation:
  Enabled: true
Style/MethodCallWithArgsParentheses:
# Disabled. It is acceptable to write argument bearing method invocations without parentheses in
# many cases.
  Enabled: false
Style/MethodCallWithoutArgsParentheses:
  Enabled: true
Style/MethodCalledOnDoEndBlock:
# Disabled. It is acceptable to call a method at the end of a do/end block. In particular, this is
# occationally needed in RSpec code.
  Enabled: false
Style/MethodDefParentheses:
  Enabled: true
Style/MethodMissingSuper:
# Disabled. This cop is well-meaning, but doesn't provide exemption of cases where invocation of
# super is not possible.
  Enabled: false
Style/MinMax:
  Enabled: true
Style/MissingElse:
# Disabled. It is acceptable for an if expression to not always have an else.
  Enabled: false
Style/MissingRespondToMissing:
  Enabled: true
Style/MixinGrouping:
  Enabled: true
Style/MixinUsage:
  Enabled: true
Style/ModuleFunction:
  Enabled: true
Style/MultilineBlockChain:
  Enabled: true
Style/MultilineIfModifier:
  Enabled: true
Style/MultilineIfThen:
  Enabled: true
Style/MultilineMemoization:
  Enabled: true
Style/MultilineMethodSignature:
# Disabled. It is acceptable to have a multiple line method signature when names and variables get
# too long.
  Enabled: false
Style/MultilineTernaryOperator:
  Enabled: true
Style/MultilineWhenThen:
  Enabled: true
Style/MultipleComparison:
  Enabled: true
Style/MutableConstant:
  Enabled: true
Style/NegatedIf:
  Enabled: true
Style/NegatedUnless:
  Enabled: true
Style/NegatedWhile:
  Enabled: true
Style/NestedModifier:
  Enabled: true
Style/NestedParenthesizedCalls:
  Enabled: true
Style/NestedTernaryOperator:
  Enabled: true
Style/Next:
# Disabled. Don't require the use of 'next' when conditionals are used within loops.
  Enabled: false
Style/NilComparison:
  Enabled: true
Style/NonNilCheck:
  Enabled: true
Style/Not:
  Enabled: true
Style/NumericLiteralPrefix:
  Enabled: true
Style/NumericLiterals:
  Enabled: true
Style/NumericPredicate:
  Enabled: true
Style/OneLineConditional:
  Enabled: true
Style/OptionHash:
# Disabled. It is acceptable to use a Hash variable named options, instead of keyword arguments.
  Enabled: false
Style/OptionalArguments:
  Enabled: true
Style/OrAssignment:
  Enabled: true
Style/ParallelAssignment:
  Enabled: true
Style/ParenthesesAroundCondition:
  Enabled: true
Style/PercentLiteralDelimiters:
  Enabled: true
Style/PercentQLiterals:
  Enabled: true
Style/PerlBackrefs:
  Enabled: true
Style/PreferredHashMethods:
  Enabled: true
Style/Proc:
  Enabled: true
Style/RaiseArgs:
  Enabled: true
Style/RandomWithOffset:
  Enabled: true
Style/RedundantBegin:
  Enabled: true
Style/RedundantCapitalW:
  Enabled: true
Style/RedundantCondition:
  Enabled: true
Style/RedundantConditional:
  Enabled: true
Style/RedundantException:
  Enabled: true
Style/RedundantFreeze:
  Enabled: true
Style/RedundantInterpolation:
  Enabled: true
Style/RedundantParentheses:
  Enabled: true
Style/RedundantPercentQ:
  Enabled: true
Style/RedundantReturn:
  Enabled: true
Style/RedundantSelf:
  Enabled: true
Style/RedundantSort:
  Enabled: true
Style/RedundantSortBy:
  Enabled: true
Style/RegexpLiteral:
  Enabled: true
  EnforcedStyle: slashes
  AllowInnerSlashes: true
Style/RescueModifier:
  Enabled: true
Style/RescueStandardError:
  Enabled: true
Style/ReturnNil:
# Enabled. It is preferred to omit the literal 'nil' when returning.
  Enabled: true
  EnforcedStyle: return
Style/SafeNavigation:
  Enabled: true
Style/Sample:
  Enabled: true
Style/SelfAssignment:
  Enabled: true
Style/Semicolon:
  Enabled: true
Style/Send:
# Disabled. Any form of send is acceptable.
  Enabled: false
Style/SignalException:
  Enabled: true
Style/SingleLineBlockParams:
# Disabled. This cop is problematic and the default values are overbearing.
  Enabled: false
Style/SingleLineMethods:
  Enabled: true
Style/SpecialGlobalVars:
  Enabled: true
Style/StabbyLambdaParentheses:
  Enabled: true
Style/StderrPuts:
# Disabled. This cop functionally equates use of STDERR with optional warnings. This may be true in some use cases, but there
#           are times when using STDERR in CLIs is not an optional warning.
  Enabled: false
Style/StringHashKeys:
# Disabled. There are many use cases where using Strings for Hash keys is required.
  Enabled: false
Style/StringLiterals:
  Enabled: true
Style/StringLiteralsInInterpolation:
  Enabled: true
Style/StringMethods:
# Enabled. It is preferred to use 'to_sym' instead of the alias 'intern'.
  Enabled: true
Style/Strip:
  Enabled: true
Style/StructInheritance:
  Enabled: true
Style/SymbolArray:
# Use of %i[] or %I[] can help readability and maintainability, but not necessarily for small
# arrays, which the manual defines as less than 7.
  Enabled: true
  MinSize: 7
Style/SymbolLiteral:
  Enabled: true
Style/SymbolProc:
# Disabled. Using &:method, instead of { |obj| obj.method }, is sometimes more readable, there
# are plenty of cases when this is not the case.
  Enabled: false
Style/TernaryParentheses:
  Enabled: true
Style/TrailingBodyOnClass:
  Enabled: true
Style/TrailingBodyOnMethodDefinition:
  Enabled: true
Style/TrailingBodyOnModule:
  Enabled: true
Style/TrailingCommaInArguments:
  Enabled: true
Style/TrailingCommaInArrayLiteral:
  Enabled: true
Style/TrailingCommaInHashLiteral:
  Enabled: true
Style/TrailingMethodEndStatement:
  Enabled: true
Style/TrailingUnderscoreVariable:
  Enabled: true
Style/TrivialAccessors:
  Enabled: true
Style/UnlessElse:
  Enabled: true
Style/UnpackFirst:
  Enabled: true
Style/VariableInterpolation:
  Enabled: true
Style/WhenThen:
  Enabled: true
Style/WhileUntilDo:
  Enabled: true
Style/WhileUntilModifier:
  Enabled: true
Style/WordArray:
# Use of %w[] or %W[] can help readability and maintainability, but not necessarily for small
# arrays, which the manual defines as less than 7.
  Enabled: true
  MinSize: 7
Style/YodaCondition:
  Enabled: true
Style/ZeroLengthPredicate:
  Enabled: true
